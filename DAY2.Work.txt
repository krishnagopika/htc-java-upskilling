Q1.Bubble Sort

	
import java.util.Scanner;

public class BubbleSort {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);	
		int size = sc.nextInt();
		int a[]=new int[size];
		for(int i=0;i<a.length;i++) {
			a[i]=sc.nextInt();
		}
		for(int i=0;i<a.length;i++) {
			for(int j=i+1;j<a.length;j++) {
				if(a[i]>a[j]) {
					int t=a[i];
					a[i]=a[j];
					a[j]=t;
				}
			}			
		}
		for(int i=0;i<a.length;i++) {
			System.out.println("Bubble Sort: "+a[i]);
		}
		
	
	}

}

Q2.Insertion Sort


import java.util.Scanner;

public class InsertionSort {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int size=sc.nextInt();
		int a[]=new int[size];
		for(int i=0;i<a.length;i++) {
			a[i]=sc.nextInt();
		}
		for(int i=1;i<a.length;i++) {
			int temp=a[i];
			int j=i-1;
			while(j>=0 && a[j]>temp) {
				a[j+1]=a[j];
				j--;
			}
			a[j+1]=temp;
		}
		for(int i=0;i<a.length;i++) {
			System.out.println(a[i]);
		}
		}

}

Q3.MergeSort

	import java.util.Arrays;
import java.util.Scanner;

public class MergeSort {
	public static void sort(int []a) {
		int a1=a.length;
		if(a1<2) {
			return;
		}
		int mid=a1/2;
		int[] lh=new int[mid];
		int []rh=new int[a1-mid];
		for(int i=0;i<mid;i++) {
			lh[i]=a[i];
		}
		for(int i=mid;i<a1;i++) {
			rh[i-mid]=a[i];
		}
		sort(lh);
		sort(rh);
		merge(a,lh,rh);
	}
	public static void merge(int []a,int[]lh,int[] rh) {
		 int lh1=lh.length;
		 int rh1=rh.length;
		 int i=0,j=0,k=0;
		 while(i<lh1 && j<rh1) {
			 if(lh[i]<=rh[j]) {
				 a[k]=lh[i];
				 i++;
			 }else {
				 a[k]=rh[j];
				 j++;
			 }
			 k++;
		 }
		while(i<lh1) {
			a[k]=lh[i];
			i++;
			k++;
		}
		while(j<rh1) {
			a[k]=rh[j];
			j++;
			k++;
		}
	}
	public static void printArray(int []n) {
		
	}

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int size=sc.nextInt();
		int n[]=new int[size];
		for(int i=0;i<n.length;i++) {
			n[i]=sc.nextInt();
		}
		System.out.println("before"+Arrays.toString(n));
		
		sort(n);
		System.out.println("sorted"+Arrays.toString(n));
		
	}
}

Q4.QuickSort

	import java.util.Arrays;
import java.util.Scanner;

public class QuickSort {
	public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            int pivotIndex = partition(arr, low, high);
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    public static int partition(int[] arr, int low, int high) {
        int pivot = arr[high];
        int i = low - 1;

        for (int j = low; j < high; j++) {
            if (arr[j] < pivot) {
                i++;
                swap(arr, i, j);
            }
        }

        swap(arr, i + 1, high);
        return i + 1;
    }

    public static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    public static void main(String[] args) {
    	Scanner sc=new Scanner(System.in);
		int size=sc.nextInt();
		int arr[]=new int[size];
		for(int i=0;i<arr.length;i++) {
			arr[i]=sc.nextInt();
		}
        System.out.println("Original array: " + Arrays.toString(arr));
        quickSort(arr, 0, arr.length - 1);
        System.out.println("Sorted array: " + Arrays.toString(arr));
    }
}

Q5.SelectionSort

	
import java.util.Scanner;

public class SelectionSort {

	public static void main(String[] args) {
		Scanner sc=new Scanner(System.in);
		int size=sc.nextInt();
		int a[]=new int[size];
		for(int i=0;i<a.length;i++) {
			a[i]=sc.nextInt();
		}
		for(int i=0;i<a.length-1;i++) {
			int min=i;
			for(int j=i+1;j<a.length;j++) {
				if(a[j]<a[min]) {
					min=j;
				}
			}
			if(min!=i) {
				int t=a[i];
				a[i]=a[min];
				a[min]=t;
			}}
			for(int i=0;i<a.length;i++) {
				System.out.println(a[i]);
			}
		
	}

}

Q6.LinearSort

	
import java.util.Arrays;
import java.util.Scanner;

public class LinearSearch {

	public static void main(String args[]){  
		Scanner sc=new Scanner(System.in);
		int size=sc.nextInt();
		int a[]=new int[size];
		
		for(int i=0;i<a.length;i++) {
			a[i]=sc.nextInt();
			
		}
		int position =-1;
		int element=sc.nextInt();
		for(int i=0;i<a.length;i++) {
			
			if(a[i]==element) {
				position=i;
				break;
			}
		}
		for(int i=0;i<a.length;i++) {
		if(position==-1) {
			System.out.println("not found");
		}else {
			System.out.println("found");
		}}
    }  
}


Q7.Binary Search
	
import java.util.Arrays;
import java.util.Scanner;

public class BinarySearch {

	public static void main(String args[]){  
		Scanner sc=new Scanner(System.in);
		int size=sc.nextInt();
		int a[]=new int[size];
		
		for(int i=0;i<a.length;i++) {
			a[i]=sc.nextInt();
			
		}
		int key=sc.nextInt();
        int result = Arrays.binarySearch(a,key);  
        if (result < 0)  
            System.out.println("Element is not found!");  
        else  
            System.out.println("Element is found at index: "+result);  
    }  

}

